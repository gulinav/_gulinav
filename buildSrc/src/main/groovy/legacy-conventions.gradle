// General configuration for gradle
buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.9.RELEASE")
        classpath("net.ltgt.gradle:gradle-apt-plugin:0.21")
        classpath("io.franzbecker:gradle-lombok:3.1.0")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.1")
    }
}


plugins {
    id 'io.spring.dependency-management'
    id 'java'
    id 'idea'
    id 'dependency-conventions'
}

version = '1.0'


// Define global variables alphabetically
// Especially, globally define the versions for all used dependencies
// Also the versions for dependencies of sub-projects should be defined here
ext {
    camundaVersion = "7.11.0"
    guavaVersion = "28.1-jre"
    hamcrestVersion = "1.3"
    jacksonVersion = "2.9.9"
    jGraphTVersion = "1.3.0"
    juelVersion = "2.2.7"
    junitVersion = "4.4"
    kieVersion = "7.26.0.Final"
    log4j2Version = "2.12.1"
    lombokVersion = "1.18.8"
    mockitoVersion = "2.28.2"
    powerMockVersion = "2.0.4"
    springBootVersion = "2.1.8.RELEASE"
    springVersion = "5.2.0.RELEASE"
}

group = 'de.ukaachen.gpm'
sourceCompatibility = 11
targetCompatibility = 11

// Only define dependencies that are super-general purpose. All project-specific dependencies
// should be defined in the project-specific gradle build file
dependencies {
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation("com.google.guava:guava:${guavaVersion}")
    implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("org.apache.logging.log4j:log4j-api:${log4j2Version}")
    implementation("org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework:spring-core:${springVersion}")
    implementation("org.springframework:spring-web:${springVersion}")
    testImplementation("junit:junit:${junitVersion}")
    testImplementation("org.hamcrest:hamcrest-library:${hamcrestVersion}")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.powermock:powermock-api-mockito2:${powerMockVersion}")
    testImplementation("org.powermock:powermock-module-junit4:${powerMockVersion}")
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}